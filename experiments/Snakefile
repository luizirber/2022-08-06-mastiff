EXEC="cargo run -p mastiff-index --release -- "

rule all:
#    input: "outputs/rs207"
#    input: "outputs/rs207-2k"
    input: expand("outputs/genbank-{domain}", domain=["archaea", "bacteria", "fungi", "protozoa", "viral"])

rule rs207_1k:
    output: directory("outputs/rs207-1k")
    input:
      storage="inputs/gtdb-rs207.genomic-reps.dna.k21.zip",
      manifest="inputs/gtdb-rs207.genomic-reps.dna.k21.manifest"
    threads: 24
    shell: """
        export RAYON_NUM_THREADS={threads}
        RUST_LOG=info {EXEC} index -k 21 -s 1000 \
          --output {output} \
          --manifest <(head -1002 {input.manifest}) \
          {input.storage}
    """

rule rs207_2k:
    output: directory("outputs/rs207-2k")
    input: 
        previous="outputs/rs207-1k",
        storage="inputs/gtdb-rs207.genomic-reps.dna.k21.zip",
        manifest="inputs/gtdb-rs207.genomic-reps.dna.k21.manifest",
    threads: 24
    shell: """
        export RAYON_NUM_THREADS={threads}
        cp -a {input.previous} {output}
        {EXEC} update -k 21 -s 1000 \
          --output {output} \
          --manifest <(head -2002 {input.manifest}) \
          {input.storage}
    """

rule rs_207:
    output: directory("outputs/rs207")
    input: "inputs/gtdb-rs207.genomic-reps.dna.k21.zip"
    shell: """
        {EXEC} index -k 21 -s 1000 \
            --output {output} \
            {input}
    """

rule download_rs_207:
    output: "inputs/gtdb-rs207.genomic-reps.dna.k21.zip"
    shell: """
        curl -L https://osf.io/download/f2wzc/ -o {output}
    """

rule extract_rs_207_manifest:
    output: "inputs/gtdb-rs207.genomic-reps.dna.k21.manifest"
    input: "inputs/gtdb-rs207.genomic-reps.dna.k21.zip"
    shell: """
        unzip -p {input} SOURMASH-MANIFEST.csv > {output}
    """

#######################################################################

#rule metag_all:
#    output: directory("/scratch/analysis/metag_k21_s{scaled,\d+}-roaring")
#    params:
#        scaled = "{scaled}"
#    shell: """
#        {EXEC} index -k 21 -s {params.scaled} \
#            --output {output} \
#            --save-paths \
#            catalog_metagenomes
#    """

rule metag_all_update:
    input:
        updated="updated_catalog"
    params:
        scaled = "1000"
    shell: """
        {EXEC} update -k 21 -s {params.scaled} \
            --output /scratch/analysis/metag_k21_s{params.scaled}-roaring \
            --save-paths \
            {input.updated}
    """

rule metag_fullcolors:
    output: directory("outputs/fullcolors")
    shell: """
        {EXEC} index -k 21 -s 1000 \
            --output {output} \
            --colors \
            <(head -1 catalog_metagenomes | xargs yes | head -1000)
    """

rule metag_1k:
    output: directory("outputs/metag-1k")
    shell: """
        {EXEC} index -k 21 -s 1000 \
            --output {output} \
            --save-paths \
            <(head -1000 catalog_metagenomes)
    """

rule metag_1k_colors:
    output: directory("outputs/metag-1k-colors")
    shell: """
        RUST_LOG=trace {EXEC} index -k 21 -s 1000 \
            --output {output} \
            --colors \
            --save-paths \
            <(head -1000 catalog_metagenomes)
    """

rule manifest_from_catalog:
    output:
        manifest="outputs/metagenomes-k{ksize}-s1000.manifest",
    input:
        catalog="outputs/metagenomes-catalog",
    thread: 24,
    shell: """
        export RAYON_NUM_THREADS={threads}
        RUST_LOG=info {EXEC} manifest -k 21 \
            --output {output} \
            --basepath /data/wort/wort-sra \
            {input.catalog}
    """

rule catalog_metagenomes:
    output:
        catalog="outputs/metagenomes-catalog",
    input:
        runinfo="runinfo-20230817.csv",
        basepath="/data/wort/wort-sra/"
    run:
        import csv
        from pathlib import Path

        # load all sra IDs
        sraids = set()
        with open(input.runinfo) as fp:
            data = csv.DictReader(fp, delimiter=",")
            for dataset in data:
                if dataset['Run'] != 'Run':
                    sraids.add(dataset['Run'])

        path = Path(input.basepath)
        with open(output.catalog, 'w') as out:
            # check if sraids exist on disk
            for sra_id in sraids:
                sig_path = path / "sigs" / f"{sra_id}.sig"
                if sig_path.exists():
                    out.write(f"{sig_path}\n")
                    out.flush()

#######################################################################

rule genbank:
    output: directory("outputs/genbank-{domain}")
    input: "/data/wort/databases/genbank-2022.03-{domain}-k21.zip"

    shell: """
        {EXEC} index -k 21 -s 1000 \
            --output {output} \
            {input}
    """

#######################################################################

"""
{EXEC} index -k 21 -s 1000 --output /scratch/analysis/rocksdb_metagenomes catalog_metagenomes
{EXEC} index -k 21 -s 10000 --output /scratch/analysis/rocksdb_metagenomes2 <(cat catalog_metagenomes | head 1000)
{EXEC} index -k 21 -s 1000 --output /scratch/analysis/rocksdb_metagenomes2 <(cat catalog_metagenomes | head -n 10)
{EXEC} index -k 21 -s 10000 --output /scratch/analysis/rocksdb_metagenomes2 <(cat catalog_metagenomes | head -n 10)
{EXEC} index -k 21 -s 10000 --output /scratch/analysis/rocksdb_metagenomes2 <(cat catalog_metagenomes | head -n 1000)
{EXEC} index -k 51 -s 1000 --output bacteria-100k-enum flist
{EXEC} index -k 51 -s 1000 --output bacteria-100k-cf <(head -1 flist)
{EXEC} index -k 51 -s 1000 --output bacteria-1k-cf (head -1000 flist)
{EXEC} index -k 51 -s 1000 --output bacteria-1k-cf $(head -1000 flist)
{EXEC} index -k 51 -s 1000 --output bacteria-10k-cf <(head -10000 flist)
{EXEC} index -k 51 -s 1000 --output bacteria-100k-cf flist
{EXEC} index -k 51 -s 1000 --output bacteria-1k-cf-opts <(head -1000 flist)
{EXEC} index -k 51 -s 1000 --output bacteria-100k-cf-opts flist
"""
